"""Tests for CLI utilities."""
import pytest
import os
import json
from cli.commands.code import app as code_app
from cli.commands.api import app as api_app
from typer.testing import CliRunner
from unittest.mock import patch

runner = CliRunner()

def test_code_explain_with_file(temp_code_file):
    """Test the code explain command with a temporary file."""
    with patch('builtins.open', return_value=open(temp_code_file)):
        result = runner.invoke(code_app, ["explain", str(temp_code_file)])
        assert result.exit_code == 0
        assert "Explaining code from" in result.stdout
        assert "explanation would be generated by AI model" in result.stdout.lower()

def test_code_explain_with_line_range(temp_code_file):
    """Test the code explain command with a line range."""
    with patch('builtins.open', return_value=open(temp_code_file)):
        result = runner.invoke(code_app, ["explain", str(temp_code_file), "--lines", "1-3"])
        assert result.exit_code == 0
        assert "Explaining code from" in result.stdout
        assert "explanation would be generated by AI model" in result.stdout.lower()

def test_code_generate_with_output(tmp_path):
    """Test code generation with output to a file."""
    output_file = tmp_path / "generated_code.py"
    
    result = runner.invoke(
        code_app,
        ["generate", "A function to check if a number is prime", "--language", "python", "--output", str(output_file)]
    )
    
    assert result.exit_code == 0
    assert "Generating python code for" in result.stdout
    assert f"Code written to {output_file}" in result.stdout
    assert os.path.exists(output_file)
    
    # Check the content of the generated file
    with open(output_file, "r") as f:
        content = f.read()
        assert "# Generated python code" in content
        assert "prime" in content.lower()

@patch('cli.commands.api.requests.request')
def test_api_request_command(mock_request, tmp_path):
    """Test the API request command."""
    # Mock the requests.request function
    mock_response = mock_request.return_value
    mock_response.status_code = 200
    mock_response.reason = "OK"
    mock_response.elapsed.total_seconds.return_value = 0.5
    mock_response.headers = {"Content-Type": "application/json"}
    mock_response.json.return_value = {"message": "Success", "data": [1, 2, 3]}
    mock_response.text = json.dumps({"message": "Success", "data": [1, 2, 3]})
    
    # Run the command
    result = runner.invoke(
        api_app,
        ["request", "https://api.example.com/endpoint", "--method", "GET"]
    )
    
    # Check the output
    assert result.exit_code == 0
    assert "Making GET request to https://api.example.com/endpoint" in result.stdout
    assert "Status: 200 OK" in result.stdout
    assert "Content-Type: application/json" in result.stdout
    assert "message" in result.stdout
    assert "Success" in result.stdout

@patch('cli.commands.api.requests.request')
def test_api_request_command_with_data(mock_request, tmp_path):
    """Test the API request command with data."""
    # Mock the requests.request function
    mock_response = mock_request.return_value
    mock_response.status_code = 201
    mock_response.reason = "Created"
    mock_response.elapsed.total_seconds.return_value = 0.8
    mock_response.headers = {"Content-Type": "application/json"}
    mock_response.json.return_value = {"id": 123, "status": "created"}
    mock_response.text = json.dumps({"id": 123, "status": "created"})
    
    # Run the command
    result = runner.invoke(
        api_app,
        [
            "request", 
            "https://api.example.com/endpoint", 
            "--method", "POST",
            "--data", '{"name": "Test", "email": "test@example.com"}'
        ]
    )
    
    # Check the output
    assert result.exit_code == 0
    assert "Making POST request to https://api.example.com/endpoint" in result.stdout
    assert "Status: 201 Created" in result.stdout
    assert "id" in result.stdout
    assert "created" in result.stdout
    
    # Verify the mock was called with the right parameters
    mock_request.assert_called_once()
    call_kwargs = mock_request.call_args[1]
    assert call_kwargs["method"] == "POST"
    assert call_kwargs["url"] == "https://api.example.com/endpoint"
    assert call_kwargs["json"] == {"name": "Test", "email": "test@example.com"} 