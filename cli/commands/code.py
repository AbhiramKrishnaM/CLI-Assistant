"""Code generation commands."""
import typer
from typing import Optional
from rich import print
from rich.syntax import Syntax
from cli.utils.api import api_request

app = typer.Typer(help="Generate and manage code snippets")

@app.command()
def generate(
    description: str = typer.Argument(..., help="Description of the code to generate"),
    language: str = typer.Option("python", help="Programming language"),
    output: Optional[str] = typer.Option(None, "--output", "-o", help="Output file path"),
    temperature: float = typer.Option(0.7, "--temperature", "-t", help="Temperature for generation (0.0-1.0)"),
    max_length: Optional[int] = typer.Option(None, "--max-length", "-l", help="Maximum length of generated code"),
):
    """Generate code based on a natural language description."""
    print(f"Generating {language} code for: {description}")
    
    # Request code generation from the backend API
    response = api_request(
        endpoint="/code/generate", 
        method="POST",
        data={
            "description": description,
            "language": language,
            "temperature": temperature,
            "max_length": max_length
        },
        loading_message=f"Generating {language} code..."
    )
    
    if "error" in response:
        print("[bold red]Failed to generate code.[/bold red]")
        # Fallback to mock implementation
        code = f"# Generated {language} code based on: {description}\n\n# TODO: Implement AI model integration\n"
    else:
        code = response.get("code", "# Error: No code was generated")
        # Clean up any potential newline issues
        code = code.replace("\\n", "\n").strip()
    
    if output:
        with open(output, "w") as f:
            f.write(code)
        print(f"Code written to [bold]{output}[/bold]")
    else:
        print("\n[bold green]Generated Code:[/bold green]")
        # Use the rich Syntax class for syntax highlighting
        try:
            syntax = Syntax(code, language, theme="monokai", line_numbers=True)
            print(syntax)
        except Exception:
            # Fallback to simple printing if syntax highlighting fails
            print(code)

@app.command()
def explain(
    file_path: str = typer.Argument(..., help="Path to the code file to explain"),
    line_range: Optional[str] = typer.Option(None, "--lines", "-l", help="Line range (e.g., '10-20')"),
    language: Optional[str] = typer.Option(None, "--language", help="Programming language"),
    detail_level: str = typer.Option("medium", "--detail", "-d", help="Explanation detail level (brief, medium, detailed)"),
):
    """Explain the provided code."""
    try:
        with open(file_path, "r") as f:
            code = f.read()
        
        if line_range:
            start, end = map(int, line_range.split("-"))
            lines = code.splitlines()[start-1:end]
            code = "\n".join(lines)
        
        print(f"Explaining code from {file_path}:")
        
        # Request code explanation from the backend API
        response = api_request(
            endpoint="/code/explain", 
            method="POST",
            data={
                "code": code,
                "language": language,
                "detail_level": detail_level
            },
            loading_message="Analyzing code and generating explanation..."
        )
        
        if "error" in response:
            print("[bold red]Failed to explain code.[/bold red]")
            # Fallback to mock implementation
            print("\nCode explanation would be generated by AI model")
            print("\nThis code performs an important function. (AI explanation would go here)")
        else:
            explanation = response.get("explanation", "No explanation was generated")
            # Clean up any potential newline issues
            explanation = explanation.replace("\\n", "\n").strip()
            print("\n[bold green]Explanation:[/bold green]")
            print(explanation)
            
    except FileNotFoundError:
        print(f"[bold red]Error:[/bold red] File {file_path} not found.", err=True)
    except Exception as e:
        print(f"[bold red]Error:[/bold red] {str(e)}", err=True) 