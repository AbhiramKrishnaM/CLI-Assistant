"""Documentation search and summarization."""
import os
import typer
from typing import List, Optional

app = typer.Typer(help="Search and summarize documentation")

# Mock documentation database (would be replaced with embeddings search)
MOCK_DOCS = {
    "python": {
        "list": "Lists are used to store multiple items in a single variable. Lists are created using square brackets.",
        "dict": "Dictionaries are used to store data values in key:value pairs. A dictionary is a collection which is ordered, changeable and do not allow duplicates.",
        "function": "A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function.",
    },
    "javascript": {
        "array": "JavaScript arrays are used to store multiple values in a single variable. Arrays use numbered indexes.",
        "object": "JavaScript objects are containers for named values called properties or methods.",
        "function": "JavaScript functions are blocks of code designed to perform a particular task and executed when 'called'.",
    },
    "git": {
        "commit": "The git commit command captures a snapshot of the project's currently staged changes.",
        "push": "The git push command is used to upload local repository content to a remote repository.",
        "pull": "The git pull command is used to fetch and download content from a remote repository and immediately update the local repository to match that content.",
    }
}

@app.command()
def search(
    query: List[str] = typer.Argument(..., help="Search terms"),
    language: Optional[str] = typer.Option(None, "--language", "-l", help="Limit search to specific language/tool"),
    max_results: int = typer.Option(5, "--max", "-m", help="Maximum number of results to display"),
):
    """Search documentation for specific terms."""
    search_terms = " ".join(query).lower()
    typer.echo(f"Searching docs for: {search_terms}")
    
    results = []
    
    # Filter by language if provided
    doc_sources = MOCK_DOCS.items()
    if language:
        if language in MOCK_DOCS:
            doc_sources = [(language, MOCK_DOCS[language])]
        else:
            typer.echo(f"Warning: No documentation found for {language}", err=True)
            return
    
    # Search through docs
    for lang, topics in doc_sources:
        for topic, content in topics.items():
            if search_terms in topic.lower() or search_terms in content.lower():
                results.append((lang, topic, content))
    
    # Display results
    if not results:
        typer.echo("No results found. Try different search terms.")
        return
    
    typer.echo(f"\nFound {len(results)} results:")
    for i, (lang, topic, content) in enumerate(results[:max_results], 1):
        typer.echo(f"\n{i}. [{lang}] {topic}")
        typer.echo(f"   {content[:150]}{'...' if len(content) > 150 else ''}")
    
    if len(results) > max_results:
        typer.echo(f"\n...and {len(results) - max_results} more results.")

@app.command()
def summarize(
    file_path: str = typer.Argument(..., help="Documentation file to summarize"),
    length: str = typer.Option("medium", help="Summary length (short, medium, long)"),
):
    """Summarize a documentation file."""
    if not os.path.exists(file_path):
        typer.echo(f"Error: File {file_path} not found.", err=True)
        return
    
    try:
        with open(file_path, "r") as f:
            content = f.read()
        
        # Calculate summary length
        content_length = len(content)
        if length == "short":
            summary_size = min(content_length, 200)
        elif length == "long":
            summary_size = min(content_length, 1000)
        else:  # medium
            summary_size = min(content_length, 500)
        
        typer.echo(f"Summary of {file_path} ({length}):\n")
        
        # Mock summary - would be replaced with AI-generated summary
        summary = f"This document is about {os.path.basename(file_path)}. It contains information that would be useful for developers. The summary would be generated by an AI model."
        
        if content_length > 100:
            # Add a bit of context from the beginning
            intro = content[:100].replace("\n", " ")
            summary += f"\n\nIt begins with: \"{intro}...\""
        
        typer.echo(summary)
        
    except Exception as e:
        typer.echo(f"Error: {str(e)}", err=True) 